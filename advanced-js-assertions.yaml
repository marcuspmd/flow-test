suite_name: "Exemplos Avançados de $js em Assertions"
node_id: "advanced-js-assertions"
base_url: "http://localhost:8080"

variables:
  # Valores dinâmicos usando $js
  current_timestamp: "{{$js.return Date.now()}}"
  yesterday_timestamp: "{{$js.return Date.now() - (24 * 60 * 60 * 1000)}}"
  random_threshold: "{{$js.return Math.floor(Math.random() * 100)}}"

steps:
  - name: "Assertions com JavaScript Dinâmico"
    request:
      method: POST
      url: "/post"
      body:
        timestamp: "{{current_timestamp}}"
        yesterday: "{{yesterday_timestamp}}"
        score: "{{random_threshold}}"
        metadata:
          generated_at: "{{$js.return new Date().toISOString()}}"
          random_id: "{{$js.return Math.random().toString(36).substr(2, 9)}}"

    assert:
      status_code: 200

      # Assertions customizadas com JavaScript
      custom:
        - name: "timestamp_is_recent"
          condition: "Date.now() - body.json.timestamp < 5000"
          message: "Timestamp deve ser dos últimos 5 segundos"

        - name: "yesterday_is_valid"
          condition: "body.json.yesterday < body.json.timestamp"
          message: "Yesterday deve ser anterior ao timestamp atual"

        - name: "score_in_valid_range"
          condition: "body.json.score >= 0 && body.json.score <= 100"
          message: "Score deve estar entre 0 e 100"

        - name: "metadata_has_iso_date"
          condition: "/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/.test(body.json.metadata.generated_at)"
          message: "Data deve estar em formato ISO válido"

        - name: "random_id_has_correct_length"
          condition: "body.json.metadata.random_id.length === 9"
          message: "Random ID deve ter exatamente 9 caracteres"

  - name: "Validações Condicionais com JavaScript"
    request:
      method: GET
      url: "/delay/1"

    assert:
      status_code: 200

      custom:
        - name: "response_time_validation"
          condition: "response_time >= 1000 && response_time <= 2000"
          message: "Delay de 1 segundo deve resultar em tempo entre 1-2s"

        - name: "weekend_or_weekday_logic"
          condition: "new Date().getDay() === 0 || new Date().getDay() === 6 ? response_time < 5000 : response_time < 3000"
          message: "Timeout mais flexível no fim de semana"

  - name: "Validation com Headers e JavaScript"
    request:
      method: GET
      url: "/headers"

    assert:
      status_code: 200

      custom:
        - name: "content_type_validation"
          condition: "headers['content-type'].includes('application/json')"
          message: "Response deve ser JSON"

        - name: "has_required_headers"
          condition: "Object.keys(headers).length > 3"
          message: "Deve ter pelo menos 4 headers"

        - name: "body_has_host_header"
          condition: "body.headers && body.headers.Host"
          message: "Body deve conter informações do header Host"