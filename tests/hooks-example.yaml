suite_name: E-commerce API - Complete Flow with Hooks
node_id: ecommerce-hooks-demo
base_url: https://dummyjson.com
variables:
  user_tier: premium
  discount_rate: 0.15
exports:
  - auth_token
  - cart_id
  - order_id
metadata:
  priority: high
  tags:
    - hooks
    - demo
    - ecommerce
  description: Demonstrates all lifecycle hook types with practical examples
steps:
  - name: User login with request hooks
    step_id: login
    hooks_pre_request:
      - compute:
          timestamp: $Date.now()
          request_id: $crypto.randomUUID()
          user_agent: Flow-Test-Engine/2.0
      - validate:
          - expression: user_tier
            message: User tier must be defined
            severity: error
          - expression: discount_rate >= 0 && discount_rate <= 1
            message: Discount rate must be between 0 and 1
            severity: warning
      - log:
          level: info
          message: Attempting login at {{timestamp}} with request {{request_id}}
          metadata:
            user_tier: '{{user_tier}}'
            client: flow-test
    request:
      method: POST
      url: /auth/login
      headers:
        X-Request-ID: '{{request_id}}'
        X-Timestamp: '{{timestamp}}'
        User-Agent: '{{user_agent}}'
      body:
        username: emilys
        password: emilyspass
        expiresInMins: 30
    hooks_post_request:
      - compute:
          response_time: $Date.now() - timestamp
          expires_at: $Date.now() + (30 * 60 * 1000)
          token_length: $response.body.token.length
      - metric:
          name: api_login_duration_ms
          value: '{{response_time}}'
          tags:
            endpoint: /auth/login
            status: success
            user_tier: '{{user_tier}}'
      - validate:
          - expression: response_time < 2000
            message: Login took {{response_time}}ms - Performance acceptable
            severity: info
          - expression: response_time < 5000
            message: Login took {{response_time}}ms - Performance degraded!
            severity: warning
      - log:
          level: info
          message: Login successful in {{response_time}}ms, token expires at {{expires_at}}
          metadata:
            token_length: '{{token_length}}'
            user_id: $response.body.id
    assert:
      status_code: 200
      body:
        token:
          exists: true
          type: string
        id:
          exists: true
          type: number
    capture:
      auth_token: body.token
      user_id: body.id
      user_email: body.email
  - name: Select product with input hooks
    step_id: select-product
    hooks_pre_input:
      - compute:
          default_product_id: $Math.floor(Math.random() * 100) + 1
          input_timestamp: $Date.now()
      - validate:
          - expression: auth_token
            message: Must be authenticated before selecting products
            severity: error
      - log:
          level: info
          message: 'Requesting product selection (default: {{default_product_id}})'
    input:
      prompt: Enter product ID to add to cart
      variable: selected_product_id
      type: number
      default: '{{default_product_id}}'
      required: true
      validation:
        min: 1
        max: 100
      ci_default: 1
    hooks_post_input:
      - compute:
          sanitized_product_id: $Math.max(1, Math.min(100, parseInt(selected_product_id) || 1))
          input_duration_ms: $Date.now() - input_timestamp
      - metric:
          name: user_input_duration_ms
          value: '{{input_duration_ms}}'
          tags:
            input_type: product_selection
            has_default: 'true'
      - log:
          level: debug
          message: 'Product ID selected: {{sanitized_product_id}} (input took {{input_duration_ms}}ms)'
  - name: Add product {{product.id}} to cart
    step_id: add-to-cart
    iterate:
      over: '[{id: 1, qty: 2}, {id: 5, qty: 1}, {id: "{{sanitized_product_id}}", qty: 3}]'
      as: product
    hooks_pre_iteration:
      - compute:
          iteration_start: $Date.now()
          item_number: $_iteration.index + 1
          is_first: $_iteration.isFirst
          is_last: $_iteration.isLast
      - log:
          level: info
          message: 'Processing item {{item_number}}: Product {{product.id}} (qty: {{product.qty}})'
          metadata:
            is_first_item: '{{is_first}}'
            is_last_item: '{{is_last}}'
    hooks_pre_request:
      - compute:
          discounted_qty: '$user_tier === ''premium'' ? product.qty + 1 : product.qty'
      - validate:
          - expression: product.id && product.qty > 0
            message: Valid product ID and quantity required
            severity: error
    request:
      method: POST
      url: /carts/add
      headers:
        Authorization: Bearer {{auth_token}}
        X-User-Tier: '{{user_tier}}'
      body:
        userId: '{{user_id}}'
        products:
          - id: '{{product.id}}'
            quantity: '{{discounted_qty}}'
    hooks_post_request:
      - metric:
          name: cart_item_added
          value: 1
          tags:
            product_id: '{{product.id}}'
            quantity: '{{discounted_qty}}'
            user_tier: '{{user_tier}}'
    hooks_post_iteration:
      - compute:
          iteration_duration: $Date.now() - iteration_start
      - log:
          level: info
          message: Item {{item_number}} added in {{iteration_duration}}ms
      - wait: 500
    assert:
      status_code: 200
      body:
        id:
          exists: true
        products:
          type: array
    capture:
      cart_id: body.id
      cart_total: body.total
      items_count: body.totalProducts
  - name: Checkout cart with assertion hooks
    step_id: checkout
    hooks_pre_request:
      - validate:
          - expression: cart_id
            message: Cart ID is required for checkout
            severity: error
          - expression: items_count > 0
            message: Cart must have items to checkout
            severity: error
      - compute:
          checkout_timestamp: $Date.now()
          expected_discount: $cart_total * discount_rate
          final_total: $cart_total * (1 - discount_rate)
      - log:
          level: info
          message: 'Initiating checkout for cart {{cart_id}} ({{items_count}} items, total: ${{cart_total}})'
          metadata:
            expected_discount: '{{expected_discount}}'
            final_total: '{{final_total}}'
    request:
      method: POST
      url: /carts/{{cart_id}}/checkout
      headers:
        Authorization: Bearer {{auth_token}}
      body:
        paymentMethod: credit_card
        applyDiscount: true
        discountRate: '{{discount_rate}}'
    hooks_pre_assertion:
      - compute:
          actual_total: $response.body.finalTotal || 0
          total_diff: $Math.abs(final_total - (response.body.finalTotal || 0))
      - log:
          level: debug
          message: 'Validating checkout: expected ${{final_total}}, got ${{actual_total}}'
    assert:
      status_code: 200
      body:
        success:
          equals: true
        orderId:
          exists: true
          type: string
        finalTotal:
          type: number
    hooks_post_assertion:
      - metric:
          name: checkout_completed
          value: '{{actual_total}}'
          tags:
            user_tier: '{{user_tier}}'
            items_count: '{{items_count}}'
            discount_applied: 'true'
      - validate:
          - expression: total_diff < 1
            message: 'Price calculation mismatch: difference is ${{total_diff}}'
            severity: warning
      - log:
          level: info
          message: 'Checkout successful: Order $response.body.orderId, Total: ${{actual_total}}'
          metadata:
            items_purchased: '{{items_count}}'
            discount_saved: '{{expected_discount}}'
    capture:
      order_id: body.orderId
      final_amount: body.finalTotal
  - name: Verify order details with capture hooks
    step_id: verify-order
    hooks_pre_capture:
      - validate:
          - expression: response.body && response.body.order
            message: Response must contain order data
            severity: error
      - log:
          level: debug
          message: Preparing to capture order verification data
    request:
      method: GET
      url: /orders/{{order_id}}
      headers:
        Authorization: Bearer {{auth_token}}
    assert:
      status_code: 200
      body:
        order:
          id:
            equals: '{{order_id}}'
          status:
            in:
              - pending
              - confirmed
              - processing
    capture:
      order_status: body.order.status
      order_date: body.order.createdAt
      order_items: 'body.order.items[*].{id: productId, qty: quantity}'
    hooks_post_capture:
      - compute:
          order_items_count: $order_items.length
          status_uppercase: $(order_status || '').toUpperCase()
          days_since_order: $Math.floor((Date.now() - new Date(order_date).getTime()) / (1000 * 60 * 60 * 24))
      - metric:
          name: order_verification_completed
          value: 1
          tags:
            order_status: '{{order_status}}'
            items_count: '{{order_items_count}}'
      - log:
          level: info
          message: 'Order captured: Status={{status_uppercase}}, Items={{order_items_count}}, Age={{days_since_order}} days'
          metadata:
            order_id: '{{order_id}}'
            captured_variables:
              - order_status
              - order_date
              - order_items
      - script: |
          console.log('='.repeat(60));
          console.log('ORDER SUMMARY');
          console.log('='.repeat(60));
          console.log(`Order ID: ${order_id}`);
          console.log(`Status: ${order_status}`);
          console.log(`Items: ${order_items_count}`);
          console.log(`Total: $${final_amount}`);
          console.log('='.repeat(60));
          return { summary: 'Order processed successfully' };
