suite_name: "API Operations with OAuth2 Token"
node_id: "api-operations-with-auth"
description: "Exemplo de como usar o token OAuth2 obtido em outra suite"

# Base URL da API (diferente do endpoint de auth)
base_url: "{{$env.API_BASE_URL}}"

# Depende da suite de autenticação
depends:
  - path: "./oauth2-certificate-env.yaml"
    required: true
    cache: 300  # Cache o token por 5 minutos (300 segundos)
    retry:
      max_attempts: 2
      delay_ms: 1000

metadata:
  priority: "high"
  tags: ["api", "crud", "integration"]

steps:
  # ===========================================
  # Step 1: Criar Recurso
  # ===========================================
  - name: "Create Resource"
    step_id: "create-resource"

    request:
      method: POST
      url: "/api/resources"

      headers:
        # Usar token da suite de dependência
        # Formato: {{suite-node-id.variable-name}}
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"
        Content-Type: "application/json"
        X-Request-Id: "{{$js:Date.now()}}"

      body:
        name: "Test Resource {{$faker.string.alphanumeric(8)}}"
        description: "Created via automated test"
        type: "document"
        metadata:
          created_by: "flow-test-engine"
          timestamp: "{{$js:new Date().toISOString()}}"

    assert:
      status_code: 201

      headers:
        location: {exists: true}
        content-type: {contains: "json"}

      body:
        id:
          exists: true
          type: "string"
          regex: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"  # UUID

        name:
          exists: true
          type: "string"

        created_at:
          exists: true
          type: "string"

    capture:
      resource_id: "body.id"
      resource_name: "body.name"
      created_at: "body.created_at"

  # ===========================================
  # Step 2: Listar Recursos
  # ===========================================
  - name: "List Resources"
    step_id: "list-resources"

    request:
      method: GET
      url: "/api/resources"

      headers:
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"
        Accept: "application/json"

      params:
        page: 1
        limit: 10
        sort: "created_at"
        order: "desc"

    assert:
      status_code: 200

      body:
        data:
          type: "array"
          length:
            greater_than: 0
            less_than_or_equal: 10

        pagination:
          exists: true
          type: "object"

        pagination.total:
          type: "number"
          greater_than: 0

    capture:
      total_resources: "body.pagination.total"
      first_resource_id: "body.data[0].id"

  # ===========================================
  # Step 3: Obter Recurso Específico
  # ===========================================
  - name: "Get Resource by ID"
    step_id: "get-resource"

    request:
      method: GET
      url: "/api/resources/{{resource_id}}"

      headers:
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"
        Accept: "application/json"

    assert:
      status_code: 200

      body:
        id: {equals: "{{resource_id}}"}
        name: {equals: "{{resource_name}}"}
        created_at: {equals: "{{created_at}}"}

  # ===========================================
  # Step 4: Atualizar Recurso
  # ===========================================
  - name: "Update Resource"
    step_id: "update-resource"

    request:
      method: PUT
      url: "/api/resources/{{resource_id}}"

      headers:
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"
        Content-Type: "application/json"

      body:
        name: "Updated {{resource_name}}"
        description: "Updated via automated test"
        metadata:
          updated_at: "{{$js:new Date().toISOString()}}"

    assert:
      status_code: 200

      body:
        id: {equals: "{{resource_id}}"}
        name: {contains: "Updated"}

    capture:
      updated_name: "body.name"

  # ===========================================
  # Step 5: Deletar Recurso
  # ===========================================
  - name: "Delete Resource"
    step_id: "delete-resource"

    request:
      method: DELETE
      url: "/api/resources/{{resource_id}}"

      headers:
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"

    assert:
      status_code: 204

    scenarios:
      - name: "Successfully deleted"
        condition: "status == `204`"
        then:
          variables:
            deletion_successful: true

      - name: "Resource not found"
        condition: "status == `404`"
        then:
          variables:
            already_deleted: true

  # ===========================================
  # Step 6: Verificar Deleção
  # ===========================================
  - name: "Verify Deletion"
    step_id: "verify-deletion"

    request:
      method: GET
      url: "/api/resources/{{resource_id}}"

      headers:
        Authorization: "Bearer {{oauth2-cert-env-example.access_token}}"

    # Esperamos 404 pois o recurso foi deletado
    assert:
      status_code: 404

      body:
        error: {equals: "not_found"}
        message: {exists: true}
