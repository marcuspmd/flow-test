suite_name: "Pre/Post-Request Scripts & Delay Examples"
node_id: "scripts-delay-demo"
base_url: "https://httpbin.org"

metadata:
  description: "Demonstra uso de pre_request, post_request e delay steps"
  tags: ["example", "scripts", "delay"]
  priority: "medium"

variables:
  api_key: "test_api_key_123"
  username: "testuser"

steps:
  # Example 1: Pre-request script para gerar assinatura HMAC
  - name: "Login with HMAC signature"
    pre_request:
      script: |
        // crypto já está disponível no contexto

        // Gerar timestamp
        const timestamp = Date.now();

        // Criar assinatura HMAC
        const message = `${variables.username}:${timestamp}`;
        const signature = crypto.createHmac('sha256', variables.api_key)
          .update(message)
          .digest('hex');

        // Setar variáveis para o request
        setVariable('timestamp', timestamp);
        setVariable('signature', signature);

        // Modificar headers do request
        request.headers['X-Timestamp'] = timestamp.toString();
        request.headers['X-Signature'] = signature;

        console.log('Generated signature:', signature);

      timeout: 5000
      continue_on_error: false

    request:
      method: POST
      url: "/post"
      headers:
        Content-Type: "application/json"
        X-Username: "{{username}}"
      body:
        username: "{{username}}"
        timestamp: "{{timestamp}}"
        signature: "{{signature}}"

    assert:
      status_code: 200
      # Simplificado - apenas verificar que recebeu 200
      # body:
      #   json:
      #     headers:
      #       X-Signature: {exists: true}

    capture:
      response_data: "body.json"

  # Example 2: Post-request script para processar resposta
  - name: "Get user data and process"
    request:
      method: GET
      url: "/get"
      params:
        user: "{{username}}"

    post_request:
      script: |
        const { status, body, headers } = response;

        // Validação customizada
        if (status === 200 && !body.args) {
          throw new Error('Expected args in response body');
        }

        // Processar dados
        const responseTime = response.response_time_ms;
        const isSlowApi = responseTime > 1000;

        setVariable('api_is_slow', isSlowApi);
        setVariable('response_time_category',
          responseTime < 500 ? 'fast' :
          responseTime < 1000 ? 'normal' : 'slow'
        );

        // Extrair informações complexas
        const userAgent = headers['User-Agent'] || 'unknown';
        setVariable('detected_user_agent', userAgent);

        console.log(`API response time: ${responseTime}ms (${isSlowApi ? 'slow' : 'fast'})`);
        console.log(`User agent: ${userAgent}`);

      timeout: 3000

    assert:
      status_code: 200

    capture:
      query_params: "body.args"

  # Example 3: Delay fixo (2 segundos)
  - name: "Rate limiting with fixed delay"
    request:
      method: GET
      url: "/delay/1"

    delay: 2000  # 2 segundos

  # Example 4: Delay com interpolação
  - name: "Dynamic delay based on previous response"
    pre_request:
      script: |
        // Calcular delay baseado na performance anterior
        const isSlowApi = variables.api_is_slow || false;
        const dynamicDelay = isSlowApi ? 3000 : 1000;
        setVariable('computed_delay', dynamicDelay);

        console.log(`Using dynamic delay: ${dynamicDelay}ms`);

    request:
      method: GET
      url: "/get"

    delay: "{{computed_delay}}"  # Delay interpolado

  # Example 5: Delay com range aleatório (simula comportamento humano)
  - name: "Random delay between requests"
    request:
      method: POST
      url: "/post"
      body:
        action: "random_user_action"

    delay:
      min: 500   # Mínimo 500ms
      max: 2000  # Máximo 2 segundos

  # Example 6: Pre + Post scripts + Delay combinados
  - name: "Complete workflow with all features"
    pre_request:
      script: |
        // Preparar dados dinâmicos
        const requestId = crypto.randomUUID();
        const timestamp = Date.now();  // Unix timestamp em ms

        setVariable('request_id', requestId);
        setVariable('request_timestamp', timestamp);

        // Adicionar no body do request
        request.body.request_id = requestId;
        request.body.timestamp = timestamp;

        console.log(`Request ID: ${requestId}`);

    request:
      method: POST
      url: "/post"
      headers:
        Content-Type: "application/json"
        X-Request-ID: "{{request_id}}"
      body:
        operation: "complete_workflow"
        data: "test"

    post_request:
      script: |
        const { body, response_time_ms } = response;

        // Validar request_id foi recebido corretamente
        const receivedRequestId = body.json?.request_id;
        if (receivedRequestId !== variables.request_id) {
          throw new Error('Request ID mismatch');
        }

        // Calcular métricas
        setVariable('workflow_response_time', response_time_ms);
        setVariable('workflow_completed', true);

        console.log(`Workflow completed in ${response_time_ms}ms`);

    assert:
      status_code: 200
      body:
        json:
          request_id: {equals: "{{request_id}}"}

    capture:
      workflow_data: "body.json"

    # Delay após o workflow completo
    delay: 1500

  # Example 7: Error handling com continue_on_error
  - name: "Script with error handling"
    pre_request:
      script: |
        // Script que pode falhar mas não deve parar a execução
        try {
          const value = variables.non_existent_var || 'default';
          setVariable('safe_value', value);
        } catch (error) {
          console.error('Non-critical error:', error);
          setVariable('safe_value', 'fallback');
        }

      continue_on_error: true  # Continua mesmo se o script falhar

    request:
      method: GET
      url: "/get"

  # Example 8: Base64 encoding no pre-request
  - name: "Basic auth with Base64 encoding"
    pre_request:
      script: |
        const username = variables.username;
        const password = 'password123';

        // Criar Basic Auth header
        const credentials = `${username}:${password}`;
        const encoded = Buffer.from(credentials).toString('base64');
        const authHeader = `Basic ${encoded}`;

        setVariable('auth_header', authHeader);
        request.headers['Authorization'] = authHeader;

        console.log('Basic auth configured');

    request:
      method: GET
      url: "/basic-auth/{{username}}/password123"

    assert:
      status_code: 200

  # Example 9: Loading script from external file
  - name: "External script from file"
    pre_request:
      script_file: "./scripts/auth-script.js"
      timeout: 5000

    request:
      method: POST
      url: "/post"
      body:
        test: "external_script"

    assert:
      status_code: 200

exports: ["signature", "timestamp", "workflow_completed", "api_is_slow", "auth_signature"]
