suite_name: "Nested JavaScript Interpolation Test"
node_id: "nested-js-test"
description: |
  Testa interpolação aninhada de variáveis dentro de expressões JavaScript.
  Exemplo: {{$js:Buffer.from('{{username}}:{{password}}').toString('base64')}}

base_url: "https://httpbin.org"

variables:
  username: "admin"
  password: "secret123"
  first_name: "John"
  last_name: "Doe"

metadata:
  priority: "high"
  tags: ["javascript", "interpolation", "base64"]

steps:
  # ===========================================
  # Step 1: Basic Auth com interpolação aninhada
  # ===========================================
  - name: "Test Basic Auth with nested interpolation"
    step_id: "basic-auth-nested"

    request:
      method: GET
      url: "/basic-auth/admin/secret123"

      headers:
        # Interpolação aninhada: {{username}} e {{password}} são resolvidos primeiro,
        # depois o JavaScript executa o Buffer.from() e toString('base64')
        Authorization: "Basic {{$js:Buffer.from('{{username}}:{{password}}').toString('base64')}}"
        X-Test-Header: "Testing nested interpolation"

    assert:
      status_code: 200

      body:
        authenticated: {equals: true}
        user: {equals: "admin"}

    capture:
      auth_header_used: "{{$js:Buffer.from('{{username}}:{{password}}').toString('base64')}}"

  # ===========================================
  # Step 2: Concatenação com interpolação aninhada
  # ===========================================
  - name: "Test string concatenation with nested variables"
    step_id: "string-concat-nested"

    request:
      method: POST
      url: "/anything"

      headers:
        Content-Type: "application/json"
        # Interpolação aninhada em concatenação
        X-Full-Name: "{{$js:'{{first_name}} ' + '{{last_name}}'}}"
        X-Uppercase-Name: "{{$js:'{{first_name}}'.toUpperCase()}}"

      body:
        full_name: "{{$js:'{{first_name}} {{last_name}}'}}"
        username_length: "{{$js:'{{username}}'.length}}"
        combined: "{{$js:('{{username}}' + ':' + '{{password}}').length}}"

    assert:
      status_code: 200

      body:
        json:
          full_name: {equals: "John Doe"}
          username_length: {equals: 5}
          combined: {equals: 15}  # "admin:secret123".length = 15

  # ===========================================
  # Step 3: Expressões matemáticas com variáveis
  # ===========================================
  - name: "Test math expressions with nested variables"
    step_id: "math-nested"

    variables:
      quantity: 10
      price: 99.99

    request:
      method: POST
      url: "/anything"

      body:
        quantity: "{{quantity}}"
        price: "{{price}}"
        # Interpolação aninhada em cálculo
        total: "{{$js:{{quantity}} * {{price}}}}"
        total_rounded: "{{$js:Math.round({{quantity}} * {{price}})}}"
        discount_10_percent: "{{$js:({{quantity}} * {{price}} * 0.9).toFixed(2)}}"

    assert:
      status_code: 200

      body:
        json:
          total: {equals: 999.9}
          total_rounded: {equals: 1000}
          discount_10_percent: {equals: "899.91"}

  # ===========================================
  # Step 4: JSON manipulation com variáveis
  # ===========================================
  - name: "Test JSON manipulation with nested variables"
    step_id: "json-nested"

    variables:
      user_data:
        id: 123
        name: "Test User"
        role: "admin"

    request:
      method: POST
      url: "/anything"

      headers:
        # Serializar objeto com interpolação
        X-User-Json: "{{$js:JSON.stringify({{user_data}})}}"

      body:
        # Acessar propriedade aninhada
        user_id: "{{$js:{{user_data}}.id}}"
        user_role: "{{$js:{{user_data}}.role}}"
        is_admin: "{{$js:{{user_data}}.role === 'admin'}}"

    assert:
      status_code: 200

  # ===========================================
  # Step 5: Timestamp e Date com interpolação
  # ===========================================
  - name: "Test date operations with nested variables"
    step_id: "date-nested"

    variables:
      days_to_add: 7

    request:
      method: POST
      url: "/anything"

      body:
        current_timestamp: "{{$js:Date.now()}}"
        # Adicionar dias com variável
        future_timestamp: "{{$js:Date.now() + ({{days_to_add}} * 24 * 60 * 60 * 1000)}}"
        current_date: "{{$js:new Date().toISOString()}}"

    assert:
      status_code: 200

    capture:
      request_timestamp: "body.json.current_timestamp"

  # ===========================================
  # Step 6: Validar resultado da interpolação
  # ===========================================
  - name: "Validate interpolation results"
    step_id: "validate-results"

    request:
      method: GET
      url: "/anything"

      headers:
        # Verificar se o auth_header foi capturado corretamente
        X-Captured-Auth: "{{auth_header_used}}"

    assert:
      status_code: 200

      headers:
        x-captured-auth: {exists: true}

    scenarios:
      - name: "Auth header correctly interpolated"
        condition: "headers['x-captured-auth'] == 'YWRtaW46c2VjcmV0MTIz'"
        then:
          variables:
            interpolation_success: true

  # ===========================================
  # Step 7: Casos extremos
  # ===========================================
  - name: "Test edge cases"
    step_id: "edge-cases"

    variables:
      empty_string: ""
      null_value: null
      special_chars: "!@#$%^&*()"

    request:
      method: POST
      url: "/anything"

      body:
        # String vazia
        empty_length: "{{$js:'{{empty_string}}'.length}}"
        # Caracteres especiais (escapados no JS)
        has_special: "{{$js:'{{special_chars}}'.includes('@')}}"
        # Concatenação com null
        null_string: "{{$js:String({{null_value}})}}"

    assert:
      status_code: 200

      body:
        json:
          empty_length: {equals: 0}
          has_special: {equals: true}
          null_string: {equals: "null"}
