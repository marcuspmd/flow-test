# tests/meu-primeiro-teste.yaml
suite_name: "Teste de Login API"
node_id: "auth"
base_url: "{{httpbin_url}}"

variables:
  secure_signing_key: "NTNv7j0TuYARvmNMmWXo6fKvM4o6nv/aUi9ryX38ZH+L1bkrnD1ObOQ8JAUmHCBq7Iy7otZcyAagBLHVKvvYaIpmMuxmARQ97jUVG16Jkpkp1wXOPsrF9zwew6TpczyHkHgX5EuLg2MeBuiT/qJACs1J0apruOOJCg/gOtkjB4c="
  # Credenciais de teste
  test_credentials:
    username: "test_user@flowtest.com"
    password: "test_password_123"

  # URLs simuladas de autenticação
  auth_endpoints:
    login: "/post"
    user_profile: "/anything"

  # Tokens simulados para testes
  mock_responses:
    jwt_login_success:
      # Acess Token valido (exemplo fictício) jwt.io
      access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30"

    user_profile:
      name: "John Doe"
      admin: true
      username: "test_user@flowtest.com"

# Exports para que possa utilizar em outras suits
# Será exportada como {{auth.token}} "node_id.variavelName"
exports:
  - token

steps:
  # Step 1
  - name: "Fazer login"
    request:
      method: POST
      url: "{{auth_endpoints.login}}"
      headers:
        Content-Type: "application/json"
        X-Auth-Token: "{{auth_token}}"
      body:
        username: "{{test_credentials.username}}"
        password: "{{test_credentials.password}}"
        # Simula para o httpbin.org/post retorne o token no response
        token: "{{mock_responses.jwt_login_success.access_token}}"
    assert:
      status_code: 200
      body:
        json:
          token:
            type: "string"
            pattern: "^[A-Za-z0-9-_.]+$"
            minLength: 10
            notEmpty: true
      # Custom assertions com JavaScript
      custom:
        - name: "jwt_token_format"
          condition: "body.json.token.split('.').length === 3"
          message: "Token JWT deve ter 3 partes separadas por ponto"

        - name: "token_not_empty"
          condition: "body.json.token && body.json.token.trim().length > 0"
          message: "Token não pode ser vazio ou apenas espaços"

        - name: "token_length_valid"
          condition: "body.json.token.length > 50"
          message: "Token deve ter comprimento adequado para JWT"

        - name: "response_time_reasonable"
          condition: "response_time < 5000"
          message: "Tempo de resposta deve ser menor que 5 segundos"
    capture:
      token: "body.json.token"

  # Step 2
  - name: "Buscar perfil do usuário"
    request:
      method: GET
      url: "{{auth_endpoints.user_profile}}?username={{test_credentials.username}}&admin=true&name={{mock_responses.user_profile.name}}"
      headers:
        # Variaveis de mesma suite não precisa de prefixo.
        Authorization: "Bearer {{token}}"
    assert:
      status_code: 200
      body:
        args:
          admin:
            equals: true
          name:
            type: "string"
            equals: "{{mock_responses.user_profile.name}}"
            minLength: 1
      # Custom assertions para validação avançada
      custom:
        - name: "admin_privileges_check"
          condition: "body.args.admin === 'true' || body.args.admin === true"
          message: "Usuário deve ter privilégios de administrador"

        - name: "name_not_empty"
          condition: "body.args.name && body.args.name.trim().length > 0"
          message: "Nome do usuário não pode ser vazio"

        - name: "name_format_valid"
          condition: "body.args.name.split(' ').length >= 2"
          message: "Nome deve ter pelo menos nome e sobrenome"

        - name: "username_in_query"
          condition: "body.args.username && body.args.username.includes('@')"
          message: "Username deve ser um email válido"

        - name: "authorization_header_present"
          condition: "body.headers.Authorization && body.headers.Authorization.startsWith('Bearer ')"
          message: "Header Authorization deve estar presente e começar com 'Bearer '"

        - name: "response_contains_expected_data"
          condition: "Object.keys(body.args).length >= 3"
          message: "Response deve conter pelo menos 3 parâmetros"

        - name: "token_in_authorization"
          condition: "body.headers.Authorization && body.headers.Authorization.includes('eyJ')"
          message: "Header Authorization deve conter o token JWT"

    capture:
      user_name: "body.args.name"
      is_admin: "body.args.admin"