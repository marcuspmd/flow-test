---
import AdminLayout from '../layouts/AdminLayout.astro';
import QuickInfo, { QuickInfoGrid } from '../components/QuickInfo';
import type { ReportData, StepResult } from '../types/dashboard.types';
import { loadReportData } from '../services/dataLoader';

// Load real data from flow-test results
const reportData: ReportData = await loadReportData();

// Extrair dados de performance
const allSteps = reportData.suites_results?.flatMap(suite =>
  suite.steps_results || []
) || [];

// Calcular métricas de performance
const responseTimes = allSteps.map(step => step.duration_ms || 0);
const avgResponseTime = responseTimes.length > 0
  ? Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length)
  : 0;
const minResponseTime = responseTimes.length > 0 ? Math.min(...responseTimes) : 0;
const maxResponseTime = responseTimes.length > 0 ? Math.max(...responseTimes) : 0;
const p95ResponseTime = responseTimes.length > 0
  ? Math.round(responseTimes.sort((a, b) => a - b)[Math.floor(responseTimes.length * 0.95)])
  : 0;

// Agrupar por suite para análise
const suitePerformance = reportData.suites_results?.map(suite => ({
  name: suite.suite_name,
  duration: suite.duration_ms || 0,
  steps: suite.steps_executed || 0,
  avgStepTime: suite.steps_executed > 0 ? Math.round((suite.duration_ms || 0) / suite.steps_executed) : 0,
  successRate: suite.success_rate || 0
})) || [];

// Dados para gráficos
const timeDistribution = [
  { range: '0-100ms', count: responseTimes.filter(t => t >= 0 && t < 100).length },
  { range: '100-500ms', count: responseTimes.filter(t => t >= 100 && t < 500).length },
  { range: '500ms-1s', count: responseTimes.filter(t => t >= 500 && t < 1000).length },
  { range: '1s-2s', count: responseTimes.filter(t => t >= 1000 && t < 2000).length },
  { range: '2s+', count: responseTimes.filter(t => t >= 2000).length }
];

// Preparar dados para QuickInfo components
const performanceMetrics = [
  {
    type: 'metric' as const,
    title: 'Tempo Médio',
    value: `${avgResponseTime}ms`,
    icon: '⚡',
    status: avgResponseTime < 1000 ? 'success' as const : avgResponseTime < 3000 ? 'warning' as const : 'failed' as const,
  },
  {
    type: 'metric' as const,
    title: 'P95',
    value: `${p95ResponseTime}ms`,
    icon: '📊',
    status: p95ResponseTime < 2000 ? 'success' as const : p95ResponseTime < 5000 ? 'warning' as const : 'failed' as const,
  },
  {
    type: 'metric' as const,
    title: 'Mais Rápido',
    value: `${minResponseTime}ms`,
    icon: '🚀',
    status: 'info' as const,
  },
  {
    type: 'metric' as const,
    title: 'Mais Lento',
    value: `${maxResponseTime}ms`,
    icon: '🐌',
    status: maxResponseTime > 5000 ? 'failed' as const : maxResponseTime > 2000 ? 'warning' as const : 'success' as const,
  }
];

function formatDuration(ms: number): string {
  if (ms < 1000) return `${ms}ms`;
  return `${(ms / 1000).toFixed(2)}s`;
}

function getStatusColor(rate: number): string {
  if (rate >= 95) return 'success';
  if (rate >= 80) return 'warning';
  return 'error';
}
---

<AdminLayout title="Performance Analysis">
  <div class="space-y-8">
    <!-- Header -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-3xl font-bold">Performance Analysis</h1>
        <p class="text-base-content/70 mt-2">
          Detailed performance metrics and response time analysis
        </p>
      </div>
      <div class="text-sm text-base-content/60">
        Last updated: {new Date(reportData.report_metadata?.generated_at || Date.now()).toLocaleString()}
      </div>
    </div>

    <!-- Key Performance Metrics -->
    <QuickInfoGrid
      items={performanceMetrics}
      columns={4}
      gap="lg"
      className="mb-8"
      client:load
    />

    <!-- Response Time Distribution -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">Response Time Distribution</h2>
        <div class="space-y-4">
          {timeDistribution.map(item => (
            <div class="flex items-center">
              <div class="w-24 text-sm font-medium">{item.range}</div>
              <div class="flex-1 mx-4">
                <div class="w-full bg-base-300 rounded-full h-4">
                  <div
                    class="bg-primary h-4 rounded-full transition-all duration-500"
                    style={`width: ${responseTimes.length > 0 ? (item.count / responseTimes.length) * 100 : 0}%`}
                  ></div>
                </div>
              </div>
              <div class="w-16 text-sm text-right">
                {item.count} ({responseTimes.length > 0 ? Math.round((item.count / responseTimes.length) * 100) : 0}%)
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Suite Performance Analysis -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">Suite Performance Breakdown</h2>
        <div class="overflow-x-auto">
          <table class="table table-zebra w-full">
            <thead>
              <tr>
                <th>Suite Name</th>
                <th>Total Duration</th>
                <th>Steps</th>
                <th>Avg. Step Time</th>
                <th>Success Rate</th>
                <th>Performance Rating</th>
              </tr>
            </thead>
            <tbody>
              {suitePerformance.map(suite => (
                <tr>
                  <td>
                    <div class="font-medium">{suite.name}</div>
                  </td>
                  <td>
                    <div class="font-mono text-sm">{formatDuration(suite.duration)}</div>
                  </td>
                  <td>
                    <div class="text-center">{suite.steps}</div>
                  </td>
                  <td>
                    <div class="font-mono text-sm">{formatDuration(suite.avgStepTime)}</div>
                  </td>
                  <td>
                    <div class={`badge badge-${getStatusColor(suite.successRate)}`}>
                      {suite.successRate}%
                    </div>
                  </td>
                  <td>
                    <div class="rating rating-sm">
                      {[1, 2, 3, 4, 5].map(star => (
                        <input
                          type="radio"
                          name={`rating-${suite.name}`}
                          class={`mask mask-star-2 ${
                            star <= Math.ceil((suite.successRate / 100) * 5) ? 'bg-orange-400' : 'bg-gray-300'
                          }`}
                          disabled
                        />
                      ))}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- Slowest Requests -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">Slowest Requests (Top 10)</h2>
        <div class="space-y-3">
          {allSteps
            .sort((a, b) => (b.duration_ms || 0) - (a.duration_ms || 0))
            .slice(0, 10)
            .map((step, index) => (
              <div class="flex items-center justify-between p-4 bg-base-200 rounded-lg">
                <div class="flex items-center gap-4">
                  <div class="badge badge-neutral">#{index + 1}</div>
                  <div>
                    <div class="font-medium">{step.step_name}</div>
                    <div class="text-sm text-base-content/70 font-mono">
                      {step.request_details?.method} {step.request_details?.url}
                    </div>
                  </div>
                </div>
                <div class="text-right">
                  <div class="font-bold text-lg">{formatDuration(step.duration_ms || 0)}</div>
                  <div class={`badge badge-sm ${step.status === 'success' ? 'badge-success' : 'badge-error'}`}>
                    {step.status}
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>

    <!-- Performance Recommendations -->
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <h2 class="card-title text-xl mb-4">Performance Recommendations</h2>
        <div class="space-y-4">
          {maxResponseTime > 2000 && (
            <div class="alert alert-warning">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <span>Some requests are taking over 2 seconds. Consider optimizing slow endpoints.</span>
            </div>
          )}

          {avgResponseTime > 1000 && (
            <div class="alert alert-info">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Average response time is above 1 second. Monitor API performance closely.</span>
            </div>
          )}

          {avgResponseTime <= 500 && (
            <div class="alert alert-success">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Excellent performance! All requests are performing within acceptable thresholds.</span>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<style>
  .stat {
    padding: 1.5rem;
  }

  .alert {
    margin-bottom: 1rem;
  }

  .rating input {
    pointer-events: none;
  }
</style>