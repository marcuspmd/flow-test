---
import AdminLayout from '../layouts/AdminLayout.astro';
import type { ReportData } from '../types/dashboard.types';
import { loadReportData, extractMetricsData } from '../services/dataLoader';
import { withBase } from '../utils/url';

// Load real data from flow-test results
const reportData: ReportData = await loadReportData();

// Prepare metric data for the React components
const metricsData = extractMetricsData(reportData);

// Collect every step from all suites
const allSteps = reportData.suites_results?.flatMap(suite => suite.steps_results || []) || [];
---

<AdminLayout title="Main Dashboard" reportData={reportData}>
  <!-- Hero Section -->
  <div class="hero bg-gradient-to-r from-primary/10 to-secondary/10 rounded-2xl mb-8">
    <div class="hero-content text-center py-12">
      <div>
        <div class="flex items-center justify-center gap-3 mb-4">
          <span class="text-6xl">‚ö°</span>
          <h1 class="text-5xl font-bold text-base-content">Flow Test Dashboard</h1>
        </div>
        <p class="py-6 text-xl text-base-content/70">
          Dynamic reporting system for API testing
        </p>
        <div class="stats stats-vertical lg:stats-horizontal shadow bg-base-100">
          <div class="stat">
            <div class="stat-figure text-primary">
              <span class="text-3xl">üìä</span>
            </div>
            <div class="stat-title">Total Tests</div>
            <div class="stat-value text-primary">{reportData.total_tests}</div>
            <div class="stat-desc">Executed successfully</div>
          </div>
          <div class="stat">
            <div class="stat-figure text-success">
              <span class="text-3xl">‚úÖ</span>
            </div>
            <div class="stat-title">Success Rate</div>
            <div class="stat-value text-success">{reportData.success_rate}%</div>
            <div class="stat-desc">All tests passed</div>
          </div>
          <div class="stat">
            <div class="stat-figure text-info">
              <span class="text-3xl">‚è±Ô∏è</span>
            </div>
            <div class="stat-title">Duration</div>
            <div class="stat-value text-info">{Math.round(reportData.total_duration_ms / 1000)}s</div>
            <div class="stat-desc">Total execution time</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quick Actions Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <a href={withBase('suites')} class="card bg-primary text-primary-content shadow-xl hover:shadow-2xl transition-all transform hover:scale-105">
      <div class="card-body">
        <h2 class="card-title">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          View Test Suites
        </h2>
        <p>Explore all executed test suites and their results</p>
      </div>
    </a>

    <a href={withBase('requests')} class="card bg-secondary text-secondary-content shadow-xl hover:shadow-2xl transition-all transform hover:scale-105">
      <div class="card-body">
        <h2 class="card-title">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
          </svg>
          Inspect Requests
        </h2>
        <p>View HTTP requests, responses and cURL commands</p>
      </div>
    </a>

    <a href={withBase('performance')} class="card bg-accent text-accent-content shadow-xl hover:shadow-2xl transition-all transform hover:scale-105">
      <div class="card-body">
        <h2 class="card-title">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Performance Metrics
        </h2>
        <p>Analyze execution times and performance trends</p>
      </div>
    </a>

    <a href={withBase('live')} class="card bg-neutral text-neutral-content shadow-xl hover:shadow-2xl transition-all transform hover:scale-105">
      <div class="card-body">
        <h2 class="card-title">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m2 4V9h3m4 7a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Live Monitor
        </h2>
        <p>Monitor runs in real time and trigger retries instantly</p>
      </div>
    </a>
  </div>

  <!-- Project Info -->
  <div class="card bg-base-100 shadow-xl">
    <div class="card-body">
      <h2 class="card-title flex items-center gap-2">
        <span>‚ÑπÔ∏è</span>
        Project Information
      </h2>
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        <div class="stat bg-base-200 rounded-lg">
          <div class="stat-title">Project</div>
          <div class="stat-value text-sm">{reportData.project_name}</div>
        </div>
        <div class="stat bg-base-200 rounded-lg">
          <div class="stat-title">Report Version</div>
          <div class="stat-value text-sm">{reportData.report_metadata?.version || 'N/A'}</div>
        </div>
        <div class="stat bg-base-200 rounded-lg">
          <div class="stat-title">Generated</div>
          <div class="stat-value text-sm">
            {new Date(reportData.report_metadata?.generated_at || reportData.end_time).toLocaleDateString()}
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  // Import and render React components
  import MetricsCards from '../components/MetricsCards';
  import RequestTabs from '../components/RequestTabs';
  import type { StepResult } from '../types/dashboard.types';
  import React from 'react';
  import { createRoot } from 'react-dom/client';

  // Render MetricsCards
  const metricsContainer = document.getElementById('metrics-cards');
  if (metricsContainer) {
    const metricsRoot = createRoot(metricsContainer);
    const metricsData = {
      totalTests: 42,
      successRate: 100,
      avgDuration: 50,
      criticalTests: 5,
      failedTests: 0,
      skippedTests: 0
    };

    metricsRoot.render(React.createElement(MetricsCards, { data: metricsData }));
  }

  // Render RequestTabs (if we had actual step data)
  const requestTabsContainer = document.getElementById('request-tabs');
  if (requestTabsContainer) {
    const requestRoot = createRoot(requestTabsContainer);
    const steps: StepResult[] = []; // Will be populated with actual step data when available

    requestRoot.render(React.createElement(RequestTabs, { steps }));
  }
</script>
