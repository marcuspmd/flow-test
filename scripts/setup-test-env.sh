#!/bin/bash

# Script para configurar ambiente de teste local
# Verifica e inicia o container httpbin se necess√°rio

CONTAINER_NAME="flow-test-httpbin"
HTTPBIN_PORT="8080"
HTTPBIN_URL="http://localhost:${HTTPBIN_PORT}"

echo "üîç Verificando ambiente de teste..."

# Fun√ß√£o para verificar se o container est√° rodando
check_container() {
    docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" --format "{{.Names}}" | grep -q "${CONTAINER_NAME}"
}

# Fun√ß√£o para verificar se o httpbin est√° respondendo
check_httpbin_health() {
    curl -s --max-time 5 "${HTTPBIN_URL}/get" > /dev/null 2>&1
}

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
    exit 1
fi

# Verificar se o container existe e est√° rodando
if check_container; then
    echo "‚úÖ Container httpbin j√° est√° rodando"
else
    echo "üöÄ Iniciando container httpbin..."
    
    # Parar e remover container existente se houver
    docker stop "${CONTAINER_NAME}" 2>/dev/null || true
    docker rm "${CONTAINER_NAME}" 2>/dev/null || true
    
    # Iniciar novo container
    docker run -d -p "${HTTPBIN_PORT}:80" --name "${CONTAINER_NAME}" kennethreitz/httpbin
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Container httpbin iniciado com sucesso"
    else
        echo "‚ùå Erro ao iniciar container httpbin"
        exit 1
    fi
fi

# Aguardar o httpbin ficar dispon√≠vel
echo "‚è≥ Aguardando httpbin ficar dispon√≠vel..."
for i in {1..30}; do
    if check_httpbin_health; then
        echo "‚úÖ httpbin est√° respondendo em ${HTTPBIN_URL}"
        break
    fi
    
    if [ $i -eq 30 ]; then
        echo "‚ùå Timeout aguardando httpbin responder"
        exit 1
    fi
    
    sleep 1
done

echo "üéØ Ambiente de teste pronto!"
echo "üìç httpbin URL: ${HTTPBIN_URL}"
echo ""
echo "Para parar o ambiente de teste:"
echo "   docker stop ${CONTAINER_NAME}"
echo ""